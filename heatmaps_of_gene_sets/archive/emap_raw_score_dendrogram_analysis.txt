(1) Make an ordering of mutants by residue number. Mutants at the same residue are ordered by group, and then alphabetically within groups (i.e. ALMV for non-polar small amino acids). Provide this ordering as the 'preferred' order within a tree for each of the subsequent clusterings. This doesn't affect the Rand index, our quantitative metric, but it makes visualization in JavaTree consistent.

TODO: to make all of this easier, write a single function that takes in a clustering of mutants (row_tree), and spits out a matrix of size 56 x 56,
where each column j is filled with the cluster number of mutant i when the tree is cut into j clusters. Just order the matrix to ascend alphabetically and numerically for simplicity.

(2) Clustering of mutants using the interface Î”rSASA matrix.
    (a) all mutants in EMAP
    (b) just GAP/GEF complete mutants

(3) Clustering (in one-dimension) using ratio of GEF/GAP efficiency.

(4) Clustering of the mutants using S-scores, including the full EMAP and each subset complex/process.
    (a) all mutants in EMAP
    (b) just GAP/GEF complete mutants

(5) Compute the Rand index comparing clusterings as such:
    - each of (4a) compared to (2a)
    - each of (4b) compared to (3) or (2b)
    This requires cutting the tree into a certain number of clusters. Compute a Rand index using the number of clusters created n for each value 1 <= n <= N, where N is the number of mutants. When n = 1, there is only 1 cluster, and so each dendrogram is aligned. As n increases, the clusters will diverge more and more, allowing us to plot something that looks like a precision-recall curve.

We expect to see the PRCs from (5) have a larger AUPRC for dendrograms comparing 4b to 3 (process/complex to GEF/GAP) than when comparing 4a to 2a or 4b to 2b, because we expect the GEF/GAP ordering to better explain the clustering of EMAP scores.
